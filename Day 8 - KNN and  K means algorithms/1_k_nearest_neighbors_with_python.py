# -*- coding: utf-8 -*-
"""1-K Nearest Neighbors with Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRAGLdQBmJzZzGqrdt1whUYWcnNUPW4g

# K Nearest Neighbors with Python

The classified data set from a company is given. They have hidden feature column names and the target classes. 

Let us try to use KNN to create a model that directly predicts a class for a new data point.

## Import Libraries
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

"""## Get the Data"""

df = pd.read_csv("Classified Data.txt", index_col=0)

df.head()

"""## Standardize the Variables

Because the KNN classifier predicts the class of a given test observation by identifying the observations that are nearest to it, the scale of the variables matters. Any variables that are on a large scale will have a much larger effect on the distance between the observations, and hence on the KNN classifier, than variables that are on a small scale.
"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler.fit(df.drop('TARGET CLASS',axis=1))

scaled_features = scaler.transform(df.drop('TARGET CLASS',axis=1))

print(scaled_features)

df_scaled = pd.DataFrame(scaled_features,columns=df.columns[:-1])
df_scaled.head()

"""## Train Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df_scaled,df['TARGET CLASS'], test_size=0.30)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

"""## Using KNN

Remember that we are trying to come up with a model to predict whether someone will TARGET CLASS or not. Let us start with k=1.
"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=1, metric='euclidean')
print(knn)

knn.fit(X_train,y_train)

pred = knn.predict(X_test)
print(pred)

"""## Predictions and Evaluations

Let's evaluate our KNN model!
"""

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,pred))

print(classification_report(y_test,pred))

"""## Choosing a K Value

Let's go ahead and use the elbow method to pick a good K Value:
"""

error_rate = []

# Will take some time
for i in range(1,40):
    
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train,y_train)
    pred_i = knn.predict(X_test)
    error_rate.append(np.mean(pred_i != y_test))
    print(np.mean(pred_i != y_test))

print(i)
print(pred_i != y_test)

plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',
         markerfacecolor='red', markersize=5)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

"""Here we can see that that after around K>22 the error rate just tends to hover around 0.05-0.04 Let us retrain the model with that and check the classification report."""

# FIRST A QUICK COMPARISON TO OUR ORIGINAL K=1
knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(X_train,y_train)
pred = knn.predict(X_test)

print('WITH K=1')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))

# NOW WITH K=21
knn = KNeighborsClassifier(n_neighbors=21)

knn.fit(X_train,y_train)
pred = knn.predict(X_test)

print('WITH K=23')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))



